// Provides everything you need to work with the DOM
// Document, Element, Node, NodeList, Text, Exceptions, etc.

package org.kirkplace.xpath;

import org.w3c.dom.*;
import javax.xml.xpath.*;
import javax.xml.parsers.*;
import java.io.IOException;
import org.xml.sax.SAXException;
import java.util.*;

public class Main {

  private static Scanner scan;

public static void main(String[] args){

	  		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance(); // get a parser that turns a xml doc into a DOM tree
	  		domFactory.setNamespaceAware(true); // Provides support for XML namespaces if needed 
	  		DocumentBuilder builder; // Turns xml into a DOM tree
	  		Document doc = null; // xml Document to be parsed
	  		
			try {
				// parses the file supplied
				builder = domFactory.newDocumentBuilder();
				doc = builder.parse("../new.xml");
			} 
			
			catch (SAXException e) {
				
				e.getStackTrace();
				e.getMessage();
				e.getClass();
			} 
			
			catch (IOException e) {
				
				e.getStackTrace();
				e.getMessage();
				e.getClass();
			} 
			
			catch (ParserConfigurationException e) {
				
				e.getStackTrace();
				e.getMessage();
				e.getClass();
			}
			// apply xpath query to xml file content
	  		XPath xpath = XPathFactory.newInstance().newXPath();
	  		getNodeNameAndValue(doc, xpath);
  }
  
  private static void getNodeNameAndValue(Document doc, XPath xpath){
	   
		XPathExpression expr; // XPath Query
		Object result = null; // returned from query
		scan = new Scanner(System.in); // object that stores input from console
		
		System.out.println("Enter xPath below. Type 'exit' to quit: ");
		String in = scan.nextLine();
				
		while(!in.matches("exit")){
		try {
			
			expr = xpath.compile(in); // store query
			result = expr.evaluate(doc, XPathConstants.NODESET); // Returns the result of the query
		} 
		
		catch (XPathExpressionException e) {
			
			e.getStackTrace();
			e.getMessage();
			e.getClass();
		}
		
		NodeList nodes = (NodeList) result; // Outputs the results of the query
		
		// Cycles through the results
		for (int i = 0; i < nodes.getLength(); i++) {
			
			System.out.println(nodes.item(i).getChildNodes()); // Print the matching node value
		}
		
		System.out.println("Type 'exit' to quit: ");
		in = scan.nextLine();
		}	  
  }
  
}